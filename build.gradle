// Config shared by the dcos-commons library and the examples:

plugins {
  id 'com.github.ksoichiro.console.reporter' version '0.4.0'
}

allprojects {
  apply plugin: 'java'
  apply plugin: 'jacoco'
  apply plugin: 'maven'
  apply plugin: 'eclipse'
  apply plugin: 'idea'
  apply plugin: 'maven-publish'
  apply plugin: 'com.github.ksoichiro.console.reporter'

  apply from: "$rootDir/gradle/quality.gradle"
  apply from: "$rootDir/gradle/spock.gradle"

  sourceCompatibility = '1.8'
  targetCompatibility = '1.8'

  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url "http://repository.apache.org/content/repositories/snapshots"
    }
    maven {
      url "http://repository.apache.org/content/repositories/releases"
    }
  }

  [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

  task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
  }

  idea {
    if (project.hasProperty('ideaParentDefined')) {
      project {
        jdkName = '1.8'
        languageLevel = '1.8'
        ipr {
          withXml { provider ->
            provider.node.component
              .find { it.@name == 'VcsDirectoryMappings' }
              .mapping.@vcs = 'Git'
          }
        }
      }
    }
  }

  // Print results on the fly
  test {
    testLogging {
      events "passed", "skipped", "failed"
    }
  }

  // Include unit test report in 'check'
  // (jacoco itself depends on 'test')
  check.dependsOn jacocoTestReport
  jacocoTestReport {
    afterEvaluate {
      classDirectories = files(classDirectories.files.collect {
        fileTree(dir: it, exclude: 'org/apache/mesos/testing/**')
      })
    }
    reports {
      html.destination "${buildDir}/jacoco"
    }
  }
}

// Config specific to the dcos-commons library:
apply plugin: 'application'

ext {
  findbugsAnnotateVer = "1.3.2-201002241900"
  jacksonVer = "2.6.3"
  junitVer = "4.11"
  mesosVer = "1.1.0-SNAPSHOT"
  slf4jVer = "1.7.10"
  protobufFormatVer = "1.4"
  protobufJava = "2.6.1"
}

group = "mesosphere"
version = "0.1.0-SNAPSHOT"

task sourceJar(type: Jar) {
  from sourceSets.main.allJava
}

publishing {
  repositories {
    maven {
      if(project.version.endsWith('-SNAPSHOT')) {
        url "s3://downloads.mesosphere.io/maven-snapshot/"
      } else {
        url "s3://downloads.mesosphere.io/maven/"
      }
      credentials(AwsCredentials) {
        accessKey System.env['AWS_ACCESS_KEY_ID']
        secretKey System.env['AWS_SECRET_ACCESS_KEY']
      }
    }
    publications {
      mavenJava(MavenPublication) {
        from components.java

        artifact sourceJar {
          classifier "sources"
        }
      }
    }
  }
}

configurations {
  runtime.exclude group: "org.slf4j", module: "slf4j-log4j12"
}

dependencies {
  compile "com.fasterxml.jackson.datatype:jackson-datatype-guava:${jacksonVer}"
  compile "com.kenai.nbpwr:edu-umd-cs-findbugs-annotations:${findbugsAnnotateVer}"
  compile "org.apache.mesos:mesos:${mesosVer}"
  compile "org.slf4j:log4j-over-slf4j:${slf4jVer}"
  compile "org.slf4j:jcl-over-slf4j:${slf4jVer}"
  compile "com.google.protobuf:protobuf-java:${protobufJava}"
  compile "com.googlecode.protobuf-java-format:protobuf-java-format:${protobufFormatVer}"
  compile "com.google.http-client:google-http-client:1.20.0"
}

distributions {
  main {
    mainClassName = ''
    baseName = 'mesos-http-adapter'
  }
}

apply from: 'publish.gradle'
